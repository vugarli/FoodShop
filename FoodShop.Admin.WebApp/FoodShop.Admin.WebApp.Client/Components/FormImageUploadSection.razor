@using MudBlazor


<MudStack Style="width: 100%;height: 20%;" Row="true" AlignItems="AlignItems.Center">
    <MudImage Height="100" Width="100" Src="@ImageData"></MudImage>
    <MudFileUpload T="IBrowserFile" Style="width: 100%;"
                   FilesChanged="SetFile"
                   Hidden="@false"
                   InputClass="absolute mud-width-full overflow-hidden "
                   InputStyle="opacity:0"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6">
                    Drag and drop file here or click
                </MudText>
                @if (!string.IsNullOrEmpty(_fileName))
                {    
                    <MudChip Color="Color.Dark" Text="@_fileName" />
                }
            </MudPaper>
            <MudToolBar DisableGutters="true"
                        Class="relative d-flex justify-end gap-4 z-30">
                <MudButton HtmlTag="label"
                           Color="Color.Primary"
                           for="@context.Id"
                           Variant="Variant.Filled">
                    Open file picker
                </MudButton>
                <MudButton OnClick="@Clear"
                           Color="Color.Error"
                           Disabled="@(string.IsNullOrEmpty(_fileName))"
                           Variant="Variant.Filled">
                    Clear
                </MudButton>
            </MudToolBar>
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>


@code
{
    [Parameter]
    [EditorRequired]
    public string ImageData { get; set; }

    [Parameter]
    [EditorRequired]
    public IBrowserFile SelectedImage { get; set; }

    [Parameter]
    public EventCallback<IBrowserFile> SelectedImageChanged { get; set; }

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;

    private string _fileName = default;

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;


    private async Task Clear()
    {
        _fileName = default;
        ClearDragClass();
        await SelectedImageChanged.InvokeAsync(default);
        ImageData = null;
    }

    public async Task SetFile(IBrowserFile file)
    {
        if (file != null)
        {
            _fileName = default;
            await SelectedImageChanged.InvokeAsync(file);
            _fileName = file.Name;

            long maxFileSize = 1024L * 1024L * 1024L * 2L;
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
            ImageData = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
    }

}