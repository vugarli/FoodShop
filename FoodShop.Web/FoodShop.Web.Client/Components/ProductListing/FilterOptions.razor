@using FoodShop.Web.Abstractions.Services
@using FoodShop.Web.ViewModels.Categories
@using FoodShop.Web.Client.Components.ProductListing
@using MudBlazor



<div class="col-12 col-lg-4 order-2 order-lg-1 sticky">
    <div id="product-filter-nav" class="product-filter-nav mb-3">
        <div class="product-category">
            <h5 class="filter-heading  text-center text-lg-left">Category</h5>
            @if (DiscGroup.Count() > 0 && DiscGroup.FirstOrDefault(d => d.Name == Discriminator) != null)
            @foreach(var item in DiscGroup.FirstOrDefault(d=>d.Name == Discriminator).Groups)
            {
            <p class="d-flex gap-1">
                <a class="btn btn-primary" data-bs-target="#@item.CategoryGroupName" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
                    @item.CategoryGroupName
                </a>
            </p>
                    <div class="collapse multi-collapse m-2" id="@item.CategoryGroupName">
                <div class="card card-body">
                    <ul>
                        @foreach(var sc in item.SubCategories)
                            {   
                                <li>
                                        <MudButton @onclick="@(a=>NavigateTo($"productlisting/{Discriminator}/{item.CategoryGroupName}/{sc.Name}"))">@sc.Name</MudButton>
                                </li>
                            }
                    </ul>
                </div>
            </div>
            }


        </div>

        <div class="d-flex flex-column">

        <MudExtensions.MudRangeSlider Value="MinValue ?? 0" UpperValue="MaxValue ?? 100" T="int" UpperValueChanged="MaxChanged" ValueChanged="MinChanged" Immediate="false" ValueLabel="true" Step="1" Max="100" Min="1" Range="true"></MudExtensions.MudRangeSlider>

        <div class="d-inline-flex flex-row justify-content-between">
            <span>@MinValue</span>
            <span>@MaxValue</span>
        </div>

        </div>

        <MudButton @onclick="@(async a=>await OnFilter.InvokeAsync())" >Filter</MudButton>

        <div class="product-add mt-4">
            <div class="row no-gutters">
                <div class="col-12">
                    <img src="img/advertisement.jpg" alt="images">
                </div>
            </div>
        </div>

    </div>
</div>

@code {

    public record SliderRange(int? min, int? max);

    [CascadingParameter(Name = "MaxValue")]
    public int? MaxValue { get; set; }

    [CascadingParameter(Name = "MinValue")]
    public int? MinValue { get; set; }


    public async Task MaxChanged(int m)
    {
        MaxValue = m;
        await ValuesChanged.InvokeAsync(new SliderRange(MinValue, MaxValue));
    }


    public async Task MinChanged(int m)
    {
        MinValue = m;
        await ValuesChanged.InvokeAsync(new SliderRange(MinValue, MaxValue));
    }


    [Parameter]
    public EventCallback<SliderRange> RangeValuesChanged { get; set; }




    [Inject]
    IDiscriminatorGroupsService discriminatorGroupsService { get; set;}


    [Parameter]
    public EventCallback<SliderRange> ValuesChanged { get; set; }
    
    [Parameter]
    public EventCallback OnFilter { get; set; }


    [Inject]
    public NavigationManager Navigation { get; set; }


    public void NavigateTo(string url)
    {
        Navigation.NavigateTo(url);
    }

    public List<BaseDiscriminatorGroupVM> DiscGroup { get; set; } = new();


    [Parameter]
    public string Discriminator { get; set; }

    protected async override Task OnInitializedAsync()
    {
        DiscGroup = (await discriminatorGroupsService.GetDiscriminatorGroups()).ToList();
    }

}
