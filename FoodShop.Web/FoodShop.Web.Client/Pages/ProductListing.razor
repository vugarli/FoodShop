@using FoodShop.Web.Client.Abstractions.Services
@using FoodShop.Web.ViewModels.Products
@using MudBlazor
@using FoodShop.Web.Client.Components.ProductListing
@using Microsoft.AspNetCore.Components.Sections
@using System.ComponentModel
@using static FoodShop.Web.Client.Components.ProductListing.FilterOptions

@page "/productlisting/{discriminator}"
@page "/productlisting/{discriminator}/{category}"
@page "/productlisting/{discriminator}/{category}/{subcategory}"

@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: true))

@* <NavigationLock  OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation="false" /> *@


<SectionContent SectionName="css">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="_content/CodeBeam.MudBlazor.Extensions/MudExtensions.min.css" rel="stylesheet" />
</SectionContent>


<a class="scroll-top-arrow" href="javascript:void(0);"><i class="fa fa-angle-up"></i></a>

   
<div class="d-flex flex-row align-items-center">

            <CascadingValue Value="@Max" Name="MaxValue">
                <CascadingValue Value="@Min" Name="MinValue">

                    <FilterOptions OnFilter="Filter" ValuesChanged="OnPriceRangeChange" Discriminator="@Discriminator"></FilterOptions>

                </CascadingValue>
            </CascadingValue> 

            <FilteredComponents @bind-Products="Products" ></FilteredComponents>
            
            @* <MudButton @onclick="@(()=>Products.Add(new ProductItemViewModel(){ProductName="a"}))"> Add </MudButton> *@

</div>



@code {

    [Parameter]
    public string Discriminator { get; set; }

    [Parameter]
    public string Category { get; set; }

    [Parameter]
    public string Subcategory { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; }


    [Inject]
    public IFilteredProductEntryService filteredProductEntryService { get; set; }


    [Parameter]
    [SupplyParameterFromQuery]
    public int? Max { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Min { get; set; } 

    public List<ProductItemViewModel> Products { get; set; }



    public async Task LoadData()
    {
        var filterParams = new Dictionary<string, string>();

        if (Category != null)
            filterParams.Add("Category", Category);

        if (Subcategory != null)
            filterParams.Add("SubCategory", Subcategory);

        if (Discriminator != null)
            filterParams.Add("Gender", Discriminator);


        filterParams.Add("MinPrice", Min.ToString());

        filterParams.Add("MaxPrice", Max.ToString());

        Products = ((await filteredProductEntryService.GetFilteredProductEntries(filterParams)).ToList());
    }


    public async void Filter()
    {
        await LoadData();
        StateHasChanged();
        Navigation.NavigateTo($"productlisting/{Discriminator}/{Category}/{Subcategory}?Max={Max}&Min={Min}");
    }

    public void OnPriceRangeChange(SliderRange range)
    {
        Max = range.max;
        Min = range.min;
    }

    protected override async void OnInitialized()
    {
        if (Max is null)
            Max = 100;
        if (Min is null)
            Min = 1;

        await LoadData();
        StateHasChanged();
    }

    


}
